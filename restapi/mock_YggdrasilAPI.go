// Code generated by mockery v2.13.1. DO NOT EDIT.

package restapi

import (
	context "context"

	middleware "github.com/go-openapi/runtime/middleware"
	mock "github.com/stretchr/testify/mock"

	yggdrasil "github.com/project-flotta/flotta-operator/restapi/operations/yggdrasil"
)

// MockYggdrasilAPI is an autogenerated mock type for the YggdrasilAPI type
type MockYggdrasilAPI struct {
	mock.Mock
}

// GetControlMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockYggdrasilAPI) GetControlMessageForDevice(ctx context.Context, params yggdrasil.GetControlMessageForDeviceParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, yggdrasil.GetControlMessageForDeviceParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// GetDataMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockYggdrasilAPI) GetDataMessageForDevice(ctx context.Context, params yggdrasil.GetDataMessageForDeviceParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, yggdrasil.GetDataMessageForDeviceParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// PostControlMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockYggdrasilAPI) PostControlMessageForDevice(ctx context.Context, params yggdrasil.PostControlMessageForDeviceParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, yggdrasil.PostControlMessageForDeviceParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

// PostDataMessageForDevice provides a mock function with given fields: ctx, params
func (_m *MockYggdrasilAPI) PostDataMessageForDevice(ctx context.Context, params yggdrasil.PostDataMessageForDeviceParams) middleware.Responder {
	ret := _m.Called(ctx, params)

	var r0 middleware.Responder
	if rf, ok := ret.Get(0).(func(context.Context, yggdrasil.PostDataMessageForDeviceParams) middleware.Responder); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(middleware.Responder)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockYggdrasilAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockYggdrasilAPI creates a new instance of MockYggdrasilAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockYggdrasilAPI(t mockConstructorTestingTNewMockYggdrasilAPI) *MockYggdrasilAPI {
	mock := &MockYggdrasilAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
